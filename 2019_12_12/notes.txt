In a passage of text, individual words and punctuations are called tokens.
Similarly in C program, the smallest induvidual units are known as token.

Types of Token
==============
There are 6 types:
-> keywords
-> identifier (e.g. variable names)
-> constant
-> string / character
-> special symbol
-> operator

int x;  // keyword, identifier, special symbol
x = 10;  // identifier, operator, constant, special symbol

                Constant
                    |
       -----------------------------
       |                           |
Numeric Constant            Character Constant
       |                           |
   --------------           ----------------------
   |            |           |                    |
Integer        Real       Single Character     String
Consatnt     Cosntant         Constant        Constant

Example
=======
10  // integer Constant
5.5  // real constant
'A'  // single character constant
"ABC"  // string constant


Data Types in C
===============
-> Primitive Data Type (int, float, long, char, double, ...)
-> User defined data type

Data Type          Size       Range
---------          ----       -----
(signed int)       16 bits    -2^15 to 2^15 - 1, i.e, -32768 to 32767
(unsigned int)     16 bits    0 to 65535 i.e. 0 to (2^16 - 1)

(signed short)      8 bits    -2^7 to 2^7 - 1 i.e. -128 to 127
(unsigned short)    8 bits    0 to 255 i.e. 0 to 2^7 - 1

(signed char)       8 bits    -128 to 127
(unsigned char)     8 bits    0 to 255

(signed long)      32 bits    -2^31 to 3^31 - 1
(unsigned long)    32 bits    0 to 2^32 - 1

float              32 bits
double             64 bits
long double        80 bits ?


-------------
// TYPEDEF //
=============
Syntax:
    typedef type indentifier;

Example:
    typedef int units;
    typedef float marks;

    int x; -> units x;
    float y; -> marks y;


-------------------
// STORAGE CLASS //
===================
There are 4 storage classes:
-> auto ------> Local variable
-> static ----> Local Variable
-> extern ----> Global variable
-> register --> Local variable

int x = 10;
auto int x = 10;
static int x = 10;  // cannot reinitialize, but other operations feasible
extern int x = 10;
register int x = 10;

Example for static:
main() {
    static int x = 10;
    x = x + 1;
    x = x + 2;
    x = 20;  // fails
}


---------------
// OPERATORS //
===============
There are 8 categories of operators:
1. Arithmetic Operators ---------------> +, -, *, /, %
2. Relational Operators ---------------> >=, <=, >, <, ==, !=
3. Logical Operators ------------------> &&, ||, !
4. Assignment Operator ----------------> =
5. Conditional Operator ---------------> ? :
6. Bitwise Operators ------------------> &, |, ^, <<, >>
7. Special Operators ------------------> sizeof, &, *, ., ->
8. Increment and Decrement Operators --> ++, --

Examples:
    int a = 10;
    int b = 5;

    a >= b;  // true
    a == b;  // false
    a != b;  // true

Operand 1  | Operand 2  | && | || 
---------------------------------
Non-zero   | Non-zero   |  1 |  1
Non-zero   | Zero       |  0 |  1
Zero       | Non-zero   |  0 |  1
Zero       | Zero       |  0 |  0

Example:
    a = 50, b = 20, x = 10;
    (a > b) && (x == 10);  // true
    x = 11;
    (a > b) && (x == 10);  // false
    (a > b) || (x == 10);  // true
    a = 10;
    (a > b) || (x == 10);  // false

Operand  | !
------------
Zero     | 1
Non-zero | 0

Example:
    age = 18;
    !(age > 15);  // false

Short-hand
----------
+= : a += b --> a = a + b;

Conditional
-----------
Syntax:
    condition ? operation 1 : operation 2;

Example:
    int age = 20, x = 10, y = 20;
    (age > 18) ? x : y;  // 10
    (age < 18) ? x : y;  // 20

Bitwise
-------
1 & 1 = 1   1 | 1 = 1   0 ^ 0 = 0
1 & 0 = 0   1 | 0 = 1   0 ^ 1 = 1
0 & 1 = 0   0 | 1 = 1   1 ^ 0 = 1
0 & 0 = 0   0 | 0 = 0   1 ^ 1 = 0

^ --> Exclusive Or (XOR) Operator

Left Shift (<<)
---------------
011001 << 1
110010

0100 << 1
1000

Right Shift (>>)
----------------
1000 >> 1
0100

1101 >> 1
0110

Increment Decrement
-------------------
x = 5;
x++;  // 6
++x;  // 7
--x;  // 6
x--;  // 5

sizeof
------
int x;
char c;

sizeof(x);  // 2 bytes
sizeof(c);  // 1 byte

Special
-------
int x;
&x;  // gives address of x

Precedence of Relational & Logical Operators
--------------------------------------------
!
> >= < <=
== !=
&&
||

Example:
    x = 10, y = 20;
    p = 30, q = 40
    x > y && p < q;  // false


Implicit vs Explicit Type Conversion
====================================
float x = 7.9;
int a = x;  // implicit
int a = (int) x;  // explicit
